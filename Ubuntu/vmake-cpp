<#
CPP_FILES=($(vutil_CppFromVcxproj $CPP_VCXPROJ))

for CPP_REMOVE in "${CPP_REMOVES[@]}"; do
    CPP_FILES=(${CPP_FILES[@]/$CPP_REMOVE})
done

for CPP_ADD in "${CPP_ADDS[@]}"; do
    CPP_FILES=(${CPP_FILES[@]} $CPP_ADD)
done

printf -v CPP_FILES "%s\n" "${CPP_FILES[@]}"
CPP_FILES=${CPP_FILES%?}

O_FILES=`echo "${CPP_FILES}" | sed -r -e 's%([^/]*/)*([^/]+).cpp%./Obj/\2.o%g'`
O_FILES=`echo ${O_FILES}`
#>
.PHONY: all clean pre-build
.DEFAULT_GOAL := all

include $(VCPROOT)/vl/makefile-cpp

pre-build:
	if ! [ -d ./Bin ]; then mkdir ./Bin; fi
	if ! [ -d ./Obj ]; then mkdir ./Obj; fi
	if ! [ -d ./Coverage ]; then mkdir ./Coverage; fi
<#for FOLDER in "${FOLDERS[@]}"; do#>
	if ! [ -d <#= $FOLDER #> ]; then mkdir <#= $FOLDER #>; fi
<#done#>

clean:
	if [ -d ./Bin ]; then rm -r ./Bin; fi
	if [ -d ./Obj ]; then rm -r ./Obj; fi
	if [ -d ./Coverage ]; then rm -r ./Coverage; fi
<#for FOLDER in "${FOLDERS[@]}"; do#>
	if [ -d ./<#= $FOLDER #> ]; then rm -r <#= $FOLDER #>; fi
<#done#>

all:pre-build <#= ${TARGETS[@]} #>

<#= $CPP_TARGET #>:<#= ${O_FILES} #>
	$(CPP_LINK)
<#echo "${CPP_FILES}" | while read -r CPP_FILE; do#>

./Obj/<#= `vutil_CppDependencies ${CPP_FILE}` #>
	$(CPP_COMPILE)
<#done#>
